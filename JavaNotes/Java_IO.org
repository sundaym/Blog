* Java IO
目标：掌握Java IO相关的类的基本用法，再另外学习NIO.
简介：Java IO包含了所有操作输入，输出需要的类，所有类代表了输入源和输出目标.
** Java IO分类
Java IO按数据的运输方式分为：1.字节流 2.字符流
字节流读取单个字节，字符流读取单个字符（一个字符根据编码的不同，对应的字节也不同）
字节流用来处理二进制文件（图片，mp3，视频文件）
字符流用来处理文本文件（可以看做特殊的二进制文件）

IO类基本的4个抽象类：InputStream, OutputStream, Reader, Writer
- 字节流
InputStream, OutputStream
- 字符流
Reader, Writer
** 字节流 字符流
InputStream类，获取输入数据
OutputStream类，获取输出数据
** 例子
*** 二进制文件的读取和写入
#+BEGIN_SRC java
// 读取
InputStream input = new FileInputStream("D:\\test.txt");
int c;
while ((c = input.read()) != -1){
    System.out.print(c);
}
input.close();
#+END_SRC
#+BEGIN_SRC java
// 写入二进制文件
byte[] bytes = {12, 21, 34, 11, 21};
OutputStream output = new FileOutputStream("D:\\test.txt");
output.write(bytes);
output.close();

#+END_SRC
*** 文本文件的读取
#+BEGIN_SRC java


#+END_SRC
*** Java IO正确关闭流，不实用JDK7之后的语法
#+BEGIN_SRC java
// 要在finally中关闭流
OutputStream out = null;
try {
    out = new OutputStream("");
    // out.close(); 在这里关闭流会出现错误
    // ...
} catch (Exception e) {
    e.printStackTrace();
} finally {
    try {
        if (out != null) {
            out.close();
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

#+END_SRC

#+BEGIN_SRC java
// 在关闭多个流时不能将所有流放到一个try中
OutputStream out0 = null;
OutputStream out1 = null;
try {
    out0 = new FileOutputStream("");
    out1 = new FileOutputStream("");
        // ...操作流代码
} catch (Exception e) {
    e.printStackTrace();
} finally {
    try {
        if (out != null) {
        out0.close();// 如果此处出现异常，则out2流没有被关闭
        }
        if (out2 != null) {
        out1.close();
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

#+END_SRC

#+BEGIN_SRC java
OutputStream out = null;
OutputStream out2 = null;
try {
        out = new FileOutputStream("");
        out2 = new FileOutputStream("");
        // ...操作流代码
} catch (Exception e) {
        e.printStackTrace();
} finally {
        try {
                if (out != null) {
                        out.close();// 如果此处出现异常，则out2流也会被关闭
                }
        } catch (Exception e) {
                e.printStackTrace();
        }
        try {
                if (out2 != null) {
                        out2.close();
                }
        } catch (Exception e) {
                e.printStackTrace();
        }
}

#+END_SRC

在循环中创建流，在循环外关闭，导致关闭的是最后一个流
#+BEGIN_SRC java
OutputStream out = null;
try {
        for (int i = 0; i < 10; i++) {
                out = new FileOutputStream("");
                // ...操作流代码
        }
} catch (Exception e) {
        e.printStackTrace();
} finally {
        try {
                if (out != null) {
                        out.close();
                }
        } catch (Exception e) {
                e.printStackTrace();
        }
}

#+END_SRC
#+BEGIN_SRC java
// 正确写法
for (int i = 0; i < 10; i++) {
        OutputStream out = null;
        try {
                out = new FileOutputStream("");
                // ...操作流代码
        } catch (Exception e) {
                e.printStackTrace();
        } finally {
                try {
                        if (out != null) {
                                out.close();
                        }
                } catch (Exception e) {
                        e.printStackTrace();
                }
        }
}

#+END_SRC
